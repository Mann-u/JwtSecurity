import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.alpha.polling_app.exception.UserNotFoundException;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JWTAuthenticationFilter extends OncePerRequestFilter {
		@Autowired
		private JwtTokenProvider jwtTokenProvider;
		@Autowired
		private ApplicationUserDetailsService applicationUserDetailsService;

		@Override
		protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
				FilterChain filterChain) throws ServletException, IOException {
			String authorization = request.getHeader("Authorization");
			String userId = null;
			String jwtToken = null;
			
			if (authorization!=null && authorization.startsWith("Bearer ")) {
				jwtToken = authorization.substring(7);
				
				userId = jwtTokenProvider.extractUserName(jwtToken);
				UserDetails userDetails = applicationUserDetailsService.loadUserByUsername(userId);
				
				if (userId!=null && SecurityContextHolder.getContext().getAuthentication()==null) {
					
					UsernamePasswordAuthenticationToken authenticationToken = 	new UsernamePasswordAuthenticationToken(
							userDetails, null, userDetails.getAuthorities());
					
					authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
					
					SecurityContextHolder.getContext().setAuthentication(authenticationToken);
				}else {
					throw new UserNotFoundException("Invalid User Detalies!!");
				}
			}
			filterChain.doFilter(request, response);
			
		}
		

	}

}
