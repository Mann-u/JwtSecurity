import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class JwtTokenProvider {

	private String SECRET_KEY = "pollingapp";
	private static final long JWT_TOKEN_VALIDITY = 1000*60*60*2;
	
	private String createToken(Map<String, Object> claims,String subject) {
		return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))
			.setExpiration(new Date(System.currentTimeMillis()+JWT_TOKEN_VALIDITY))
			.signWith(SignatureAlgorithm.HS256, SECRET_KEY).compact();
	}
	
	public String generateToken(UserDetails userDetails,String userId,String role) {
		Map<String, Object> claims = new HashMap();
		claims.put("userId", userId);
		claims.put("role", role);
		return createToken(claims, userDetails.getUsername());
		
	}
	
	public Boolean validateToken(String token,UserDetails userDetails) {
		final String userName = extractUserName(token);
		return (userName.equals(userDetails.getUsername()) &&!isTokenExpried(token));
	}

	private boolean isTokenExpried(String token) {
		return extractExpiration(token).before(new Date());
	}

	private Date extractExpiration(String token) {
		return extractClaim(token,Claims::getExpiration );
	}

	public String extractUserName(String token) {
		return extractClaim(token, Claims::getSubject);
	}

	private <T> T extractClaim(String token, Function<Claims, T> claimsresolver) {
		final Claims claims = extractClaims(token);
		
		return claimsresolver.apply(claims);
	}

	private Claims extractClaims(String token) {
		return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();
	}

}
